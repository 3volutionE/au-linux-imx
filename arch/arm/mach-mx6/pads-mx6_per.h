#undef MX6PAD
#undef MX6NAME
#undef MX6

#ifdef FOR_DL_SOLO
#define MX6(a) MX6DL_##a
#define MX6PAD(a) MX6DL_PAD_##a
#define MX6NAME(a) mx6dl_solo_##a
#else
#define MX6(a) MX6Q_##a
#define MX6PAD(a) MX6Q_PAD_##a
#define MX6NAME(a) mx6q_##a
#endif

#define PADCFG_INPUT		(PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS)
#define PADCFG_INPUT_L		(PAD_CTL_SPEED_LOW | PAD_CTL_DSE_40ohm | PAD_CTL_HYS)
#define PADCFG_INPUT_DN		(PADCFG_INPUT | PAD_CTL_PKE | PAD_CTL_PUE | PAD_CTL_PUS_100K_DOWN)
#define PADCFG_INPUT_UP		(PADCFG_INPUT | PAD_CTL_PKE | PAD_CTL_PUE | PAD_CTL_PUS_100K_UP)
#define PADCFG_INPUT_L_UP	(PADCFG_INPUT_L | PAD_CTL_PKE | PAD_CTL_PUE | PAD_CTL_PUS_100K_UP)

#define AUD_PAD_CTRL	(PADCFG_INPUT_L_UP | PAD_CTL_SRE_FAST)
#define CSI_PAD_CTRL	(PADCFG_INPUT_UP | PAD_CTL_SRE_FAST)
#define UART_PAD_CTRL	(PADCFG_INPUT_UP | PAD_CTL_SRE_FAST)

#define OTGID_PAD_CTRL		MX6Q_USDHC_PAD_CTRL
#define HDMICEC_PAD_CTRL	(PADCFG_INPUT_UP | PAD_CTL_ODE | PAD_CTL_SRE_SLOW)
#define ENET_PAD_CTRL		PADCFG_INPUT_UP

#define WEAK_PULLDN	PADCFG_INPUT_DN

#define PADCFG_FLOAT_IRQ (PADCFG_INPUT | PAD_CTL_PUE | PAD_CTL_PUS_100K_DOWN)
#define WEAK_PULLUP	(PADCFG_INPUT | PAD_CTL_PKE | PAD_CTL_PUE | PAD_CTL_PUS_100K_UP)
#define OUTPUT_40OHM	(PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm)

#define SPI_PAD_CTRL (PAD_CTL_HYS | PAD_CTL_SPEED_MED |	PAD_CTL_DSE_40ohm | \
		PAD_CTL_SRE_FAST)

#define SPDIF_PAD_CTRL	WEAK_PULLUP

#define PAD_CTL_PIS(pull, impede, speed)	(PAD_CTL_PKE | PAD_CTL_PUE |	\
		PAD_CTL_PUS_##pull  | PAD_CTL_SPEED_##speed |		\
		PAD_CTL_DSE_##impede   | PAD_CTL_SRE_FAST  | PAD_CTL_HYS)

#define MX6Q_USDHC_PAD_CTRL_22KPU_34OHM_50MHZ	PAD_CTL_PIS(22K_UP, 34ohm, LOW)
#define MX6Q_USDHC_PAD_CTRL_22KPU_40OHM_50MHZ	PAD_CTL_PIS(22K_UP, 40ohm, LOW)
#define MX6Q_USDHC_PAD_CTRL_22KPU_48OHM_50MHZ	PAD_CTL_PIS(22K_UP, 48ohm, LOW)
#define MX6Q_USDHC_PAD_CTRL_22KPU_60OHM_50MHZ	PAD_CTL_PIS(22K_UP, 60ohm, LOW)
#define MX6Q_USDHC_PAD_CTRL_22KPU_80OHM_50MHZ	PAD_CTL_PIS(22K_UP, 80ohm, LOW)
#define MX6Q_USDHC_PAD_CTRL_22KPU_120OHM_50MHZ	PAD_CTL_PIS(22K_UP, 120ohm, LOW)
#define MX6Q_USDHC_PAD_CTRL_47KPU_34OHM_50MHZ	PAD_CTL_PIS(47K_UP, 34ohm, LOW)
#define MX6Q_USDHC_PAD_CTRL_47KPU_40OHM_50MHZ	PAD_CTL_PIS(47K_UP, 40ohm, LOW)
#define MX6Q_USDHC_PAD_CTRL_47KPU_48OHM_50MHZ	PAD_CTL_PIS(47K_UP, 48ohm, LOW)
#define MX6Q_USDHC_PAD_CTRL_47KPU_60OHM_50MHZ	PAD_CTL_PIS(47K_UP, 60ohm, LOW)
#define MX6Q_USDHC_PAD_CTRL_47KPU_80OHM_50MHZ	PAD_CTL_PIS(47K_UP, 80ohm, LOW)
#define MX6Q_USDHC_PAD_CTRL_47KPU_120OHM_50MHZ	PAD_CTL_PIS(47K_UP, 120ohm, LOW)
#define MX6Q_USDHC_PAD_CTRL_50MHZ		MX6Q_USDHC_PAD_CTRL


#define MX6DL_USDHC_PAD_CTRL_22KPU_34OHM_50MHZ	PAD_CTL_PIS(22K_UP, 34ohm, LOW)
#define MX6DL_USDHC_PAD_CTRL_22KPU_40OHM_50MHZ	PAD_CTL_PIS(22K_UP, 40ohm, LOW)
#define MX6DL_USDHC_PAD_CTRL_22KPU_48OHM_50MHZ	PAD_CTL_PIS(22K_UP, 48ohm, LOW)
#define MX6DL_USDHC_PAD_CTRL_22KPU_60OHM_50MHZ	PAD_CTL_PIS(22K_UP, 60ohm, LOW)
#define MX6DL_USDHC_PAD_CTRL_22KPU_80OHM_50MHZ	PAD_CTL_PIS(22K_UP, 80ohm, LOW)
#define MX6DL_USDHC_PAD_CTRL_22KPU_120OHM_50MHZ	PAD_CTL_PIS(22K_UP, 120ohm, LOW)
#define MX6DL_USDHC_PAD_CTRL_47KPU_34OHM_50MHZ	PAD_CTL_PIS(47K_UP, 34ohm, LOW)
#define MX6DL_USDHC_PAD_CTRL_47KPU_40OHM_50MHZ	PAD_CTL_PIS(47K_UP, 40ohm, LOW)
#define MX6DL_USDHC_PAD_CTRL_47KPU_48OHM_50MHZ	PAD_CTL_PIS(47K_UP, 48ohm, LOW)
#define MX6DL_USDHC_PAD_CTRL_47KPU_60OHM_50MHZ	PAD_CTL_PIS(47K_UP, 60ohm, LOW)
#define MX6DL_USDHC_PAD_CTRL_47KPU_80OHM_50MHZ	PAD_CTL_PIS(47K_UP, 80ohm, LOW)
#define MX6DL_USDHC_PAD_CTRL_47KPU_120OHM_50MHZ	PAD_CTL_PIS(47K_UP, 120ohm, LOW)
#define MX6DL_USDHC_PAD_CTRL_50MHZ		MX6DL_USDHC_PAD_CTRL

#define MX6Q_PAD_SD4_CLK__USDHC4_CLK	MX6Q_PAD_SD4_CLK__USDHC4_CLK_50MHZ
#define MX6Q_PAD_SD4_CMD__USDHC4_CMD	MX6Q_PAD_SD4_CMD__USDHC4_CMD_50MHZ
#define MX6Q_PAD_SD4_DAT0__USDHC4_DAT0	MX6Q_PAD_SD4_DAT0__USDHC4_DAT0_50MHZ
#define MX6Q_PAD_SD4_DAT1__USDHC4_DAT1	MX6Q_PAD_SD4_DAT1__USDHC4_DAT1_50MHZ
#define MX6Q_PAD_SD4_DAT2__USDHC4_DAT2	MX6Q_PAD_SD4_DAT2__USDHC4_DAT2_50MHZ
#define MX6Q_PAD_SD4_DAT3__USDHC4_DAT3	MX6Q_PAD_SD4_DAT3__USDHC4_DAT3_50MHZ
#define MX6Q_PAD_SD4_DAT4__USDHC4_DAT4	MX6Q_PAD_SD4_DAT4__USDHC4_DAT4_50MHZ
#define MX6Q_PAD_SD4_DAT5__USDHC4_DAT5	MX6Q_PAD_SD4_DAT5__USDHC4_DAT5_50MHZ
#define MX6Q_PAD_SD4_DAT6__USDHC4_DAT6	MX6Q_PAD_SD4_DAT6__USDHC4_DAT6_50MHZ
#define MX6Q_PAD_SD4_DAT7__USDHC4_DAT7	MX6Q_PAD_SD4_DAT7__USDHC4_DAT7_50MHZ

#define MX6DL_PAD_SD4_CLK__USDHC4_CLK	MX6DL_PAD_SD4_CLK__USDHC4_CLK_50MHZ
#define MX6DL_PAD_SD4_CMD__USDHC4_CMD	MX6DL_PAD_SD4_CMD__USDHC4_CMD_50MHZ
#define MX6DL_PAD_SD4_DAT0__USDHC4_DAT0	MX6DL_PAD_SD4_DAT0__USDHC4_DAT0_50MHZ
#define MX6DL_PAD_SD4_DAT1__USDHC4_DAT1	MX6DL_PAD_SD4_DAT1__USDHC4_DAT1_50MHZ
#define MX6DL_PAD_SD4_DAT2__USDHC4_DAT2	MX6DL_PAD_SD4_DAT2__USDHC4_DAT2_50MHZ
#define MX6DL_PAD_SD4_DAT3__USDHC4_DAT3	MX6DL_PAD_SD4_DAT3__USDHC4_DAT3_50MHZ
#define MX6DL_PAD_SD4_DAT4__USDHC4_DAT4	MX6DL_PAD_SD4_DAT4__USDHC4_DAT4_50MHZ
#define MX6DL_PAD_SD4_DAT5__USDHC4_DAT5	MX6DL_PAD_SD4_DAT5__USDHC4_DAT5_50MHZ
#define MX6DL_PAD_SD4_DAT6__USDHC4_DAT6	MX6DL_PAD_SD4_DAT6__USDHC4_DAT6_50MHZ
#define MX6DL_PAD_SD4_DAT7__USDHC4_DAT7	MX6DL_PAD_SD4_DAT7__USDHC4_DAT7_50MHZ

#define NP(id, pin, pad_ctl) \
	NEW_PAD_CTRL(MX6PAD(SD##id##_##pin##__USDHC##id##_##pin), MX6(pad_ctl))

#define SD_PINS(id, pad_ctl) \
	NP(id, CLK, pad_ctl),	\
	NP(id, CMD, pad_ctl),	\
	NP(id, DAT0, pad_ctl),	\
	NP(id, DAT1, pad_ctl),	\
	NP(id, DAT2, pad_ctl),	\
	NP(id, DAT3, pad_ctl)

#define SD_PINS8(id, pad_ctl) \
	SD_PINS(id, pad_ctl), \
	NP(id, DAT4, pad_ctl),	\
	NP(id, DAT5, pad_ctl),	\
	NP(id, DAT6, pad_ctl),	\
	NP(id, DAT7, pad_ctl)

static const iomux_v3_cfg_t MX6NAME(board_pads)[] = {
	/* Audio - GS2971, WM5102 */
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT23__AUDMUX_AUD4_RXD), AUD_PAD_CTRL),	/* pin J3 - AOUT1/2 */
	NEW_PAD_CTRL(MX6PAD(SD2_CMD__AUDMUX_AUD4_RXC), AUD_PAD_CTRL),		/* pin J4 - ACLK*/
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT18__AUDMUX_AUD4_RXFS), AUD_PAD_CTRL),	/* pin H4 - WCLK*/

	/* Audio - TC3587 mipi hdmi input */
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT13__AUDMUX_AUD5_RXFS), AUD_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT14__AUDMUX_AUD5_RXC), AUD_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT19__AUDMUX_AUD5_RXD), AUD_PAD_CTRL),

	/* Audio - WM5102 */
	NEW_PAD_CTRL(MX6PAD(DI0_PIN2__AUDMUX_AUD6_TXD), AUD_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(DI0_PIN3__AUDMUX_AUD6_TXFS), AUD_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(DI0_PIN4__AUDMUX_AUD6_RXD), AUD_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(DI0_PIN15__AUDMUX_AUD6_TXC), AUD_PAD_CTRL),

	/* WM5102 */
	NEW_PAD_CTRL(MX6PAD(SD1_CLK__OSC32K_32K_OUT), OUTPUT_40OHM),	/* MCLK2 */
	NEW_PAD_CTRL(MX6PAD(NANDF_CS2__CCM_CLKO2), OUTPUT_40OHM),	/* MCLK1 */
#define GP_WM5102_RESET		IMX_GPIO_NR(5, 9)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT15__GPIO_5_9), OUTPUT_40OHM),
#define GP_WM5102_IRQ		IMX_GPIO_NR(5, 10)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT16__GPIO_5_10), WEAK_PULLUP),
#define GP_WM5102_LDOENA	IMX_GPIO_NR(5, 11)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT17__GPIO_5_11), OUTPUT_40OHM),
#define GP_WM5102_MIC_PTT_L	IMX_GPIO_NR(2, 31)
	NEW_PAD_CTRL(MX6PAD(EIM_EB3__GPIO_2_31), WEAK_PULLUP),		/* J2, pin 6: PTT_L */
#define GP_WM5102_MIC_PTT_R	IMX_GPIO_NR(2, 30)
	NEW_PAD_CTRL(MX6PAD(EIM_EB2__GPIO_2_30), WEAK_PULLUP),		/* J2, pin 7: PTT_R */

	/* camera - video0 - ADV7180 - I2C3, crystal 28.636 MHz */
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT12__IPU1_CSI0_D_12), CSI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT13__IPU1_CSI0_D_13), CSI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT14__IPU1_CSI0_D_14), CSI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT15__IPU1_CSI0_D_15), CSI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT16__IPU1_CSI0_D_16), CSI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT17__IPU1_CSI0_D_17), CSI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT18__IPU1_CSI0_D_18), CSI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT19__IPU1_CSI0_D_19), CSI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(CSI0_PIXCLK__IPU1_CSI0_PIXCLK), CSI_PAD_CTRL),
#define GP_ADV7180_RESET	IMX_GPIO_NR(4, 15)
	NEW_PAD_CTRL(MX6PAD(KEY_ROW4__GPIO_4_15), OUTPUT_40OHM),
#define GP_ADV7180_IRQ		IMX_GPIO_NR(1, 9)
	NEW_PAD_CTRL(MX6PAD(GPIO_9__GPIO_1_9), WEAK_PULLUP),

	/* camera - video1 - TC3587 mipi hdmi input */
#define GP_TC3587_VIDEO_DETECT	IMX_GPIO_NR(3, 23)
	NEW_PAD_CTRL(MX6PAD(EIM_D23__GPIO_3_23), WEAK_PULLUP),	/* J13 Pin 1 - Video detect */
#define GP_TC3587_HPD_IN	IMX_GPIO_NR(3, 29)
	NEW_PAD_CTRL(MX6PAD(EIM_D29__GPIO_3_29), WEAK_PULLUP),		/* J13, pin 20 */
#define GP_TC3587_RESET		IMX_GPIO_NR(6, 11)
	NEW_PAD_CTRL(MX6PAD(NANDF_CS0__GPIO_6_11), OUTPUT_40OHM),
#define GP_TC3587_IRQ		IMX_GPIO_NR(6, 14)
	NEW_PAD_CTRL(MX6PAD(NANDF_CS1__GPIO_6_14), PADCFG_FLOAT_IRQ),
#define GP_TC3587_I2C_EN	IMX_GPIO_NR(6, 16)
	NEW_PAD_CTRL(MX6PAD(NANDF_CS3__GPIO_6_16), OUTPUT_40OHM),

	/* camera - video2 - GS2971(SDI) on CSI1 */
#ifdef FOR_DL_SOLO
	/* Dualite/Solo doesn't have IPU2 */
	NEW_PAD_CTRL(MX6PAD(EIM_A24__IPU1_CSI1_D_19), CSI_PAD_CTRL),	/* GPIO2[30] */
	NEW_PAD_CTRL(MX6PAD(EIM_A23__IPU1_CSI1_D_18), CSI_PAD_CTRL),	/* GPIO6[6] */
	NEW_PAD_CTRL(MX6PAD(EIM_A22__IPU1_CSI1_D_17), CSI_PAD_CTRL),	/* GPIO2[16] */
	NEW_PAD_CTRL(MX6PAD(EIM_A21__IPU1_CSI1_D_16), CSI_PAD_CTRL),	/* GPIO2[17] */
	NEW_PAD_CTRL(MX6PAD(EIM_A20__IPU1_CSI1_D_15), CSI_PAD_CTRL),	/* GPIO2[18] */
	NEW_PAD_CTRL(MX6PAD(EIM_A19__IPU1_CSI1_D_14), CSI_PAD_CTRL),	/* GPIO2[19] */
	NEW_PAD_CTRL(MX6PAD(EIM_A18__IPU1_CSI1_D_13), CSI_PAD_CTRL),	/* GPIO2[20] */
	NEW_PAD_CTRL(MX6PAD(EIM_A17__IPU1_CSI1_D_12), CSI_PAD_CTRL),	/* GPIO2[21] */
	NEW_PAD_CTRL(MX6PAD(EIM_EB0__IPU1_CSI1_D_11), CSI_PAD_CTRL),	/* GPIO2[28] */
	NEW_PAD_CTRL(MX6PAD(EIM_EB1__IPU1_CSI1_D_10), CSI_PAD_CTRL),	/* GPIO2[29] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA0__IPU1_CSI1_D_9), CSI_PAD_CTRL),	/* GPIO3[0] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA1__IPU1_CSI1_D_8), CSI_PAD_CTRL),	/* GPIO3[1] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA2__IPU1_CSI1_D_7), CSI_PAD_CTRL),	/* GPIO3[2] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA3__IPU1_CSI1_D_6), CSI_PAD_CTRL),	/* GPIO3[3] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA4__IPU1_CSI1_D_5), CSI_PAD_CTRL),	/* GPIO3[4] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA5__IPU1_CSI1_D_4), CSI_PAD_CTRL),	/* GPIO3[5] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA6__IPU1_CSI1_D_3), CSI_PAD_CTRL),	/* GPIO3[6] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA7__IPU1_CSI1_D_2), CSI_PAD_CTRL),	/* GPIO3[7] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA8__IPU1_CSI1_D_1), CSI_PAD_CTRL),	/* GPIO3[8] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA9__IPU1_CSI1_D_0), CSI_PAD_CTRL),	/* GPIO3[9] */
	NEW_PAD_CTRL(MX6PAD(EIM_A16__IPU1_CSI1_PIXCLK), CSI_PAD_CTRL),	/* GPIO2[22] */
#else
	NEW_PAD_CTRL(MX6PAD(EIM_A24__IPU2_CSI1_D_19), CSI_PAD_CTRL),	/* GPIO2[30] */
	NEW_PAD_CTRL(MX6PAD(EIM_A23__IPU2_CSI1_D_18), CSI_PAD_CTRL),	/* GPIO6[6] */
	NEW_PAD_CTRL(MX6PAD(EIM_A22__IPU2_CSI1_D_17), CSI_PAD_CTRL),	/* GPIO2[16] */
	NEW_PAD_CTRL(MX6PAD(EIM_A21__IPU2_CSI1_D_16), CSI_PAD_CTRL),	/* GPIO2[17] */
	NEW_PAD_CTRL(MX6PAD(EIM_A20__IPU2_CSI1_D_15), CSI_PAD_CTRL),	/* GPIO2[18] */
	NEW_PAD_CTRL(MX6PAD(EIM_A19__IPU2_CSI1_D_14), CSI_PAD_CTRL),	/* GPIO2[19] */
	NEW_PAD_CTRL(MX6PAD(EIM_A18__IPU2_CSI1_D_13), CSI_PAD_CTRL),	/* GPIO2[20] */
	NEW_PAD_CTRL(MX6PAD(EIM_A17__IPU2_CSI1_D_12), CSI_PAD_CTRL),	/* GPIO2[21] */
	NEW_PAD_CTRL(MX6PAD(EIM_EB0__IPU2_CSI1_D_11), CSI_PAD_CTRL),	/* GPIO2[28] */
	NEW_PAD_CTRL(MX6PAD(EIM_EB1__IPU2_CSI1_D_10), CSI_PAD_CTRL),	/* GPIO2[29] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA0__IPU2_CSI1_D_9), CSI_PAD_CTRL),	/* GPIO3[0] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA1__IPU2_CSI1_D_8), CSI_PAD_CTRL),	/* GPIO3[1] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA2__IPU2_CSI1_D_7), CSI_PAD_CTRL),	/* GPIO3[2] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA3__IPU2_CSI1_D_6), CSI_PAD_CTRL),	/* GPIO3[3] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA4__IPU2_CSI1_D_5), CSI_PAD_CTRL),	/* GPIO3[4] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA5__IPU2_CSI1_D_4), CSI_PAD_CTRL),	/* GPIO3[5] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA6__IPU2_CSI1_D_3), CSI_PAD_CTRL),	/* GPIO3[6] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA7__IPU2_CSI1_D_2), CSI_PAD_CTRL),	/* GPIO3[7] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA8__IPU2_CSI1_D_1), CSI_PAD_CTRL),	/* GPIO3[8] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA9__IPU2_CSI1_D_0), CSI_PAD_CTRL),	/* GPIO3[9] */
	NEW_PAD_CTRL(MX6PAD(EIM_A16__IPU2_CSI1_PIXCLK), CSI_PAD_CTRL),	/* GPIO2[22] - pin A8 */
#endif
	/* Not used, but MUST be in GPIO mode */
	NEW_PAD_CTRL(MX6PAD(EIM_DA10__GPIO_3_10), WEAK_PULLUP),		/* CSI1_DATA_EN not used (pin B5 stat2) */

#define GP_GS2971_SMPTE_BYPASS	IMX_GPIO_NR(2, 24)
	NEW_PAD_CTRL(MX6PAD(EIM_CS1__GPIO_2_24), WEAK_PULLUP),		/* pin G7 - i/o SMPTE bypass */
#define GP_GS2971_RESET		IMX_GPIO_NR(3, 13)
	NEW_PAD_CTRL(MX6PAD(EIM_DA13__GPIO_3_13), OUTPUT_40OHM),	/* 0 - pin C7 - reset */
#define GP_GS2971_DVI_LOCK	IMX_GPIO_NR(3, 14)
	NEW_PAD_CTRL(MX6PAD(EIM_DA14__GPIO_3_14), WEAK_PULLUP),		/* pin B6 - stat3 - DVI_LOCK */
#define GP_GS2971_DATA_ERR	IMX_GPIO_NR(3, 15)
	NEW_PAD_CTRL(MX6PAD(EIM_DA15__GPIO_3_15), WEAK_PULLUP),		/* pin C6 - stat5 - DATA error */
#define GP_GS2971_LB_CONT	IMX_GPIO_NR(3, 20)
	NEW_PAD_CTRL(MX6PAD(EIM_D20__GPIO_3_20), WEAK_PULLUP),		/* pin A3 - LB control - float, analog input */
#define GP_GS2971_Y_1ANC	IMX_GPIO_NR(4, 26)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT5__GPIO_4_26), WEAK_PULLUP),	/* pin C5 - stat4 - 1ANC - Y signal detect */
#define GP_GS2971_RC_BYPASS	IMX_GPIO_NR(4, 27)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT6__GPIO_4_27), OUTPUT_40OHM),	/* 0 - pin G3 - RC bypass - output is buffered(low) */
#define GP_GS2971_IOPROC_EN	IMX_GPIO_NR(4, 28)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT7__GPIO_4_28), OUTPUT_40OHM),	/* 0 - pin H8 - io(A/V) processor enable */
#define GP_GS2971_AUDIO_EN	IMX_GPIO_NR(4, 29)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT8__GPIO_4_29), OUTPUT_40OHM),	/* 0 - pin H3 - Audio Enable */
#define GP_GS2971_TIM_861	IMX_GPIO_NR(4, 30)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT9__GPIO_4_30), OUTPUT_40OHM),	/* 0 - pin H5 - TIM861 timing format, 1-use HSYNC/VSYNC */
#define GP_GS2971_SW_EN		IMX_GPIO_NR(4, 31)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT10__GPIO_4_31), OUTPUT_40OHM),	/* 0 - pin D7 - SW_EN - line lock enable */
#define GP_GS2971_STANDBY	IMX_GPIO_NR(5, 0)
	NEW_PAD_CTRL(MX6PAD(EIM_WAIT__GPIO_5_0), OUTPUT_40OHM),		/* 1 - pin K2 - Standby */
#define GP_GS2971_DVB_ASI	IMX_GPIO_NR(5, 5)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT11__GPIO_5_5), WEAK_PULLUP),	/* pin G8 i/o DVB_ASI */

	/* ECSPI1 */
	NEW_PAD_CTRL(MX6PAD(EIM_D17__ECSPI1_MISO), SPI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(EIM_D18__ECSPI1_MOSI), SPI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(EIM_D16__ECSPI1_SCLK), SPI_PAD_CTRL),
#define GP_ECSPI1_CS1		IMX_GPIO_NR(3, 19)
	NEW_PAD_CTRL(MX6PAD(EIM_D19__GPIO_3_19), OUTPUT_40OHM),		/* SS1 */

	/* ECSPI3 - WM5102, GS2971 */
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT2__ECSPI3_MISO), SPI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT1__ECSPI3_MOSI), SPI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT0__ECSPI3_SCLK), SPI_PAD_CTRL),
#define GP_ECSPI3_GS2971_CS	IMX_GPIO_NR(4, 24)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT3__GPIO_4_24), OUTPUT_40OHM),
#define GP_ECSPI3_WM5102_CS	IMX_GPIO_NR(4, 25)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT4__GPIO_4_25), OUTPUT_40OHM),

	/* ENET */
	NEW_PAD_CTRL(MX6PAD(ENET_MDIO__ENET_MDIO), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(ENET_MDC__ENET_MDC), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_TXC__ENET_RGMII_TXC), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_TD0__ENET_RGMII_TD0), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_TD1__ENET_RGMII_TD1), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_TD2__ENET_RGMII_TD2), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_TD3__ENET_RGMII_TD3), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_TX_CTL__ENET_RGMII_TX_CTL), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(ENET_REF_CLK__ENET_TX_CLK), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_RXC__ENET_RGMII_RXC), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_RD0__ENET_RGMII_RD0), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_RD1__ENET_RGMII_RD1), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_RD2__ENET_RGMII_RD2), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_RD3__ENET_RGMII_RD3), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_RX_CTL__ENET_RGMII_RX_CTL), ENET_PAD_CTRL),
	/* pin 42 PHY nRST */
#define GP_ENET_PHY_RESET	IMX_GPIO_NR(1, 27)
	NEW_PAD_CTRL(MX6PAD(ENET_RXD0__GPIO_1_27), OUTPUT_40OHM),	/* Micrel RGMII Phy Reset */
#define GP_ENET_PHY_INT		IMX_GPIO_NR(1, 28)
	NEW_PAD_CTRL(MX6PAD(ENET_TX_EN__GPIO_1_28), WEAK_PULLUP),	/* Micrel RGMII Phy Interrupt */

	/* HDMI */
	NEW_PAD_CTRL(MX6PAD(KEY_ROW2__HDMI_TX_CEC_LINE), HDMICEC_PAD_CTRL),

	/* I2C1, microcontroller KL04Z32TFK4 */
	MX6PAD(EIM_D21__I2C1_SCL),	/* GPIO3[21] */
	MX6PAD(EIM_D28__I2C1_SDA),	/* GPIO3[28] */

	/* I2C2 TC3587 mipi camera, hdmi edid */
	MX6PAD(KEY_COL3__I2C2_SCL),	/* GPIO4[12] */
	MX6PAD(KEY_ROW3__I2C2_SDA),	/* GPIO4[13] */

	/* I2C3 - ADV7180, TP101 temperature sensor */
	MX6PAD(GPIO_5__I2C3_SCL),	/* GPIO1[5] */
	MX6PAD(GPIO_16__I2C3_SDA),	/* GPIO7[11]*/
#define GP_TP101_ALERT		IMX_GPIO_NR(4, 5)
	NEW_PAD_CTRL(MX6PAD(GPIO_19__GPIO_4_5), WEAK_PULLUP),


	/* PCIe */
#define GP_PCIE_RESET		IMX_GPIO_NR(5, 2)
	NEW_PAD_CTRL(MX6PAD(EIM_A25__GPIO_5_2), OUTPUT_40OHM),
#define GP_PCIE_RADIO_ON	IMX_GPIO_NR(6, 10)
	NEW_PAD_CTRL(MX6PAD(NANDF_RB0__GPIO_6_10), OUTPUT_40OHM),

	/* UART1 - J2 - PTT connector */
	NEW_PAD_CTRL(MX6PAD(SD3_DAT7__UART1_TXD), UART_PAD_CTRL),	/* J2, pin 9 */
	NEW_PAD_CTRL(MX6PAD(SD3_DAT6__UART1_RXD), UART_PAD_CTRL),	/* J2, pin 10 */

	/* UART2 - debug */
	NEW_PAD_CTRL(MX6PAD(EIM_D26__UART2_TXD), UART_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(EIM_D27__UART2_RXD), UART_PAD_CTRL),

	/* UART3 - relay J3 */
	NEW_PAD_CTRL(MX6PAD(EIM_D24__UART3_TXD), UART_PAD_CTRL),	/* J3, pin 5 */
	NEW_PAD_CTRL(MX6PAD(EIM_D25__UART3_RXD), UART_PAD_CTRL),	/* J3, pin 6 */
#define GP_RELAY_DETECT		IMX_GPIO_NR(7, 2)
	NEW_PAD_CTRL(MX6PAD(SD3_CMD__GPIO_7_2), PADCFG_FLOAT_IRQ),	/* J3 pin 7 */
#define GP_J3_CARRIER_SENSE	IMX_GPIO_NR(7, 4)
	NEW_PAD_CTRL(MX6PAD(SD3_DAT0__GPIO_7_4), PADCFG_FLOAT_IRQ),


#define GP_PTT_ON	IMX_GPIO_NR(7, 5)
	NEW_PAD_CTRL(MX6PAD(SD3_DAT1__GPIO_7_5), PADCFG_FLOAT_IRQ),

#define GP_J11_POWER_EN		IMX_GPIO_NR(7, 3)
	NEW_PAD_CTRL(MX6PAD(SD3_CLK__GPIO_7_3), PADCFG_FLOAT_IRQ),	/* power on J11 pin 3 */

	/* UART4 - GPS */
	NEW_PAD_CTRL(MX6PAD(KEY_COL0__UART4_TXD), UART_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(KEY_ROW0__UART4_RXD), UART_PAD_CTRL),
#define GP_GPS_RESET	IMX_GPIO_NR(7, 1)
	NEW_PAD_CTRL(MX6PAD(SD3_DAT4__GPIO_7_1), PADCFG_FLOAT_IRQ),
#define GP_GPS_IRQ	IMX_GPIO_NR(7, 0)
	NEW_PAD_CTRL(MX6PAD(SD3_DAT5__GPIO_7_0), WEAK_PULLUP),
#define GP_GPS_HEARTBEAT IMX_GPIO_NR(4, 10)
	NEW_PAD_CTRL(MX6PAD(KEY_COL2__GPIO_4_10), WEAK_PULLUP),

	/* UART5 - J6 data connector */
	NEW_PAD_CTRL(MX6PAD(KEY_COL1__UART5_TXD), UART_PAD_CTRL),	/* J6, pin 5 */
	NEW_PAD_CTRL(MX6PAD(KEY_ROW1__UART5_RXD), UART_PAD_CTRL),	/* J6, pin 6 */
	NEW_PAD_CTRL(MX6PAD(SD1_CMD__GPIO_1_18), WEAK_PULLUP),		/* J6, pin 8 - Data detect */
#define GP_J6_POWER_EN	IMX_GPIO_NR(1, 16)
	NEW_PAD_CTRL(MX6PAD(SD1_DAT0__GPIO_1_16), WEAK_PULLUP),		/* J6, Power enable */
	NEW_PAD_CTRL(MX6PAD(GPIO_4__GPIO_1_4), WEAK_PULLUP),		/* J6, pin 16 */

	/* USBH1 */
	NEW_PAD_CTRL(MX6PAD(EIM_D30__USBOH3_USBH1_OC), WEAK_PULLUP),	/* low indicates over current */
#define GP_USB_HUB_RESET	IMX_GPIO_NR(7, 12)
	NEW_PAD_CTRL(MX6PAD(GPIO_17__GPIO_7_12), OUTPUT_40OHM),	/* USB Hub Reset for USB2512 4 port hub */

	/* USBOTG */
	NEW_PAD_CTRL(MX6PAD(GPIO_1__USBOTG_ID), OTGID_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(KEY_COL4__USBOH3_USBOTG_OC), WEAK_PULLUP),	/* low indicates over current */
#define GP_USB_OTG_PWR		IMX_GPIO_NR(3, 22)
	NEW_PAD_CTRL(MX6PAD(EIM_D22__GPIO_3_22), OUTPUT_40OHM),

	/* USDHC4 - eMMC */
	SD_PINS8(4, USDHC_PAD_CTRL_50MHZ),
#define GP_EMMC_RESET	IMX_GPIO_NR(6, 7)
	NEW_PAD_CTRL(MX6PAD(NANDF_CLE__GPIO_6_7), OUTPUT_40OHM),	/* eMMC reset */

	/* 1-wire J11 pin 22, J3 pin 8, J6 pin 9*/
#define GP_1WIRE_EN	IMX_GPIO_NR(1, 21)
	NEW_PAD_CTRL(MX6PAD(SD1_DAT3__GPIO_1_21), WEAK_PULLUP),

	/* Microcontroller KL04Z32TFK4 on I2C1 */
#define GP_KL04_SWD_CLK	IMX_GPIO_NR(1, 0)
	NEW_PAD_CTRL(MX6PAD(GPIO_0__GPIO_1_0), WEAK_PULLDN),	/* SWD_CLK */
#define GP_KL04_SWD_IO	IMX_GPIO_NR(1, 2)
	NEW_PAD_CTRL(MX6PAD(GPIO_2__GPIO_1_2), WEAK_PULLUP),	/* SWD_IO */
#define GP_KL04_RESET	IMX_GPIO_NR(5, 20)
	NEW_PAD_CTRL(MX6PAD(CSI0_DATA_EN__GPIO_5_20), WEAK_PULLDN),
#define GP_KL04_PROGRAM	IMX_GPIO_NR(5, 22)
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT4__GPIO_5_22), WEAK_PULLDN),
#define GP_KL04_IRQ	IMX_GPIO_NR(5, 29)
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT11__GPIO_5_29), WEAK_PULLUP),

	/* Make sure these no-connects don't wiggle */
	NEW_PAD_CTRL(MX6PAD(DI0_DISP_CLK__GPIO_4_16), WEAK_PULLUP),
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT12__GPIO_5_6), WEAK_PULLUP),
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT20__GPIO_5_14), WEAK_PULLUP),
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT21__GPIO_5_15), WEAK_PULLUP),
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT22__GPIO_5_16), WEAK_PULLUP),
	0
};

static iomux_v3_cfg_t MX6NAME(gs2971_video_pads_no_cea861)[] = {
	/* sav/eav codes are used, not hsync/vsync */
	NEW_PAD_CTRL(MX6PAD(EIM_DA11__GPIO_3_11), WEAK_PULLUP),	/* pin A5 stat0 */
	NEW_PAD_CTRL(MX6PAD(EIM_DA12__GPIO_3_12), WEAK_PULLUP),	/* pin A6 stat1 */
	0
};

static iomux_v3_cfg_t MX6NAME(gs2971_video_pads_cea861)[] = {
	/* hsync/vsync are used, not sav/eav codes */
#ifdef FOR_DL_SOLO
	NEW_PAD_CTRL(MX6PAD(EIM_DA11__IPU1_CSI1_HSYNC), CSI_PAD_CTRL),	/* GPIO3[11] - pin A5 stat0 */
	NEW_PAD_CTRL(MX6PAD(EIM_DA12__IPU1_CSI1_VSYNC), CSI_PAD_CTRL),	/* GPIO3[12] - pin A6 stat1 */
#else
	NEW_PAD_CTRL(MX6PAD(EIM_DA11__IPU2_CSI1_HSYNC), CSI_PAD_CTRL),	/* GPIO3[11] - pin A5 stat0 */
	NEW_PAD_CTRL(MX6PAD(EIM_DA12__IPU2_CSI1_VSYNC), CSI_PAD_CTRL),	/* GPIO3[12] - pin A6 stat1 */
#endif
	0
};

static iomux_v3_cfg_t MX6NAME(adv7180_video_pads_no_cea861)[] = {
	/* sav/eav codes are used */
	NEW_PAD_CTRL(MX6PAD(CSI0_MCLK__GPIO_5_19), WEAK_PULLUP),
	NEW_PAD_CTRL(MX6PAD(CSI0_VSYNC__GPIO_5_21), WEAK_PULLUP),
	0
};

static iomux_v3_cfg_t MX6NAME(adv7180_video_pads_cea861)[] = {
	NEW_PAD_CTRL(MX6PAD(CSI0_MCLK__IPU1_CSI0_HSYNC), CSI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(CSI0_VSYNC__IPU1_CSI0_VSYNC), CSI_PAD_CTRL),
	0
};


static iomux_v3_cfg_t MX6NAME(hdmi_ddc_pads)[] = {
	MX6PAD(KEY_COL3__HDMI_TX_DDC_SCL), /* HDMI DDC SCL */
	MX6PAD(KEY_ROW3__HDMI_TX_DDC_SDA), /* HDMI DDC SDA */
	0
};

static iomux_v3_cfg_t MX6NAME(i2c2_pads)[] = {
	MX6PAD(KEY_COL3__I2C2_SCL),	/* I2C2 SCL */
	MX6PAD(KEY_ROW3__I2C2_SDA),	/* I2C2 SDA */
	0
};

#define MX6_USDHC_PAD_SETTING8(id, speed, pad_ctl)	\
		MX6NAME(sd##id##_##speed##mhz)[] = { SD_PINS8(id, pad_ctl), 0 }

static iomux_v3_cfg_t MX6_USDHC_PAD_SETTING8(4, 50, USDHC_PAD_CTRL_50MHZ);
static iomux_v3_cfg_t MX6_USDHC_PAD_SETTING8(4, 100, USDHC_PAD_CTRL_100MHZ);
static iomux_v3_cfg_t MX6_USDHC_PAD_SETTING8(4, 200, USDHC_PAD_CTRL_200MHZ);

#define _50MHZ 0
#define _100MHZ 1
#define _200MHZ 2
#define SD_SPEED_CNT 3
static iomux_v3_cfg_t * MX6NAME(sd_pads)[] =
{
	MX6NAME(sd4_50mhz),
	MX6NAME(sd4_100mhz),
	MX6NAME(sd4_200mhz),
};
